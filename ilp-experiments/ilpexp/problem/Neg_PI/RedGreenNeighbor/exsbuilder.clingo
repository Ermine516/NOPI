%sometimes negatives are actually positives.
%no clue why. Should test in prolog. 

pos(a).
pos(b).
pos(c).
pos(d).
pos(e).
pos(f).
neg(h).
neg(i).
neg(j).
neg(k).
neg(l).
neg(m).
neg(n).
neg(o).
neg(p).
graph(X):- pos(X).
graph(X):- neg(X).


node(G,1..n):- graph(G).
{edge(G,X,Y)}:-graph(G),node(G,X),node(G,Y), X!=Y.
% bidirectional edges
:- edge(G1,X,Y),not edge(G1,Y,X).
% all graphs are the same
:- edge(G1,X,Y),graph(G2),not edge(G2,X,Y).
% all nodes have a single colour
1{red(G,X);green(G,X)}1:- node(G,X).
%Must have n edges or more
:-graph(G), n>#count{X,Y: edge(G,X,Y)}.
% must have a red to red edge
:- graph(G1),#count{X,Y: edge(G1,X,Y), red(G1,X),red(G1,Y)} =0.
% must have a green to red edge
:- graph(G1),#count{X,Y: edge(G1,X,Y), red(G1,X),green(G1,Y)} =0.
% must have a green to red edge
:- graph(G1),#count{X,Y: edge(G1,X,Y), green(G1,X),green(G1,Y)} =0.

% must have a green to red edge
:- graph(G1),#count{X,Y: edge(G1,X,Y), red(G1,X),green(G1,Y)} =0.



%every red node must have an edge to a green one
:- pos(G), #count{X: red(G,X),green(G,Y),edge(G,X,Y) }=C1 , #count{Y: red(G,Y)} = C2, C1!=C2.

%The number of red nodes with edges to green nodes cannot be every red node
:- neg(G), #count{X: red(G,X),green(G,Y),edge(G,X,Y) }=C1 , #count{Y: red(G,Y)} = C2, C1=C2.


#show node/2.
#show edge/3.
#show red/2.
#show green/2.
